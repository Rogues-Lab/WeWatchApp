-- USERS
create table public.users (
  id          uuid not null primary key, -- UUID from auth.users
  username    text,
  about       text,
  avatar_url  text,
  address     text,
  suburb      text,
  city        text,
  longitude   numeric,
  latitude    numeric,
  admin       boolean default false,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at  timestamp with time zone default timezone('utc'::text, now()) not null
);
SELECT AddGeometryColumn ('','users','geom',4326,'POINT',2);

comment on table public.users is 'profile data for each user.';

alter table public.users enable row level security;

create policy "Public profiles are viewable by everyone."
  on public.users for select
  using ( true );

create policy "Users can insert their own profile."
  on public.users for insert
  with check ( auth.uid() = id );

create policy "Users can update own profile."
  on public.users for update
  using ( auth.uid() = id );

create table incidents (
  id bigint generated by default as identity primary key,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  incident_at timestamp with time zone default timezone('utc'::text, now()) not null,
  name text,
  reference text,
  about text,
  user_id uuid references public.users not null,
  creator text,
  visible boolean default true,

  stolenvehicle boolean default false,
  breakenter boolean default false,
  propertydamage boolean default false,
  violencethreat boolean default false,
  theft boolean default false,

  suspicious boolean default false,
  loitering boolean default false,
  unfamiliar boolean default false,
  disturbance boolean default false,

  cover_image_url text,
  longitude numeric,
  latitude numeric
);

SELECT AddGeometryColumn ('','incidents','geom',4326,'POINT',2);

alter table public.incidents enable row level security;

create policy "Public incidents are viewable by everyone."
  on incidents for select
  using ( true );

create policy "Users can insert their own incidents."
  on public.incidents for insert
  with check ( auth.uid() = user_id );

create policy "Users can update own incidents."
  on public.incidents for update
  using ( auth.uid() = user_id );

create table ref_data (
  ref text primary key,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  data text
);

alter table public.ref_data enable row level security;

create policy "Public ref_data are viewable by everyone."
  on ref_data for select
  using ( true );

CREATE TABLE bookmarks (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  incident_id bigint references incidents,
  user_id uuid references public.users not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (user_id, incident_id)
);

alter table public.bookmarks enable row level security;

create policy "Public bookmarks are viewable by everyone."
  on public.bookmarks for select
  using ( true );

create policy "Users can insert their own bookmarks."
  on public.bookmarks for insert
  with check ( auth.uid() = user_id );

create policy "Users can update own bookmarks."
  on public.bookmarks for update
  using ( auth.uid() = user_id );

create policy "Users can delete own bookmarks."
  on public.bookmarks for delete
  using ( auth.uid() = user_id );