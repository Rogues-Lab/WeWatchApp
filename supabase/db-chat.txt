-- chat functionality

CREATE TABLE chats (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid references public.users,
  slug TEXT NOT NULL unique,
  object_type text,
  object_id text,
  visible boolean default true,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.chats enable row level security;

create policy "Public chats are viewable by everyone."
  on chats for select
  using ( true );

create policy "Users can insert their own chats."
  on chats for insert
  with check ( auth.uid() = user_id );

create policy "Users can update own chats."
  on chats for update
  using ( auth.uid() = user_id );

create policy "Users can delete own chats."
  on chats for delete
  using ( auth.uid() = user_id );

CREATE TABLE messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid references auth.users not null,
  chat_id bigint references public.chats not null,
  text TEXT NOT NULL,
  visible BOOLEAN DEFAULT true,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.messages enable row level security;

create policy "Public messages are viewable by everyone."
  on messages for select
  using ( true );

create policy "Users can insert their own messages."
  on messages for insert
  with check ( auth.uid() = user_id );

create policy "Users can update own messages."
  on messages for update
  using ( auth.uid() = user_id );

create policy "Users can delete own messages."
  on messages for delete
  using ( auth.uid() = user_id );



CREATE TABLE chat_members (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid references auth.users not null,
  member_id uuid references auth.users not null,
  chat_id bigint references public.chats not null,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table public.chat_members enable row level security;

create policy "Public messages are viewable by everyone."
  on chat_members for select
  using ( true );

create policy "Users can insert their own chat_members."
  on chat_members for insert
  with check ( auth.uid() = user_id );

create policy "Users can update own chat_members."
  on chat_members for update
  using ( auth.uid() = user_id );

create policy "Users can delete own chat_members."
  on chat_members for delete
  using ( auth.uid() = user_id );


/**
 * REALTIME SUBSCRIPTIONS
 * Only allow realtime listening on public tables.
 */

begin;
  -- remove the realtime publication
  drop publication if exists supabase_realtime;

  -- re-create the publication but don't enable it for any tables
  create publication supabase_realtime;
commit;

-- add tables to the publication
alter publication supabase_realtime add table public.chats;
alter publication supabase_realtime add table public.messages;
alter publication supabase_realtime add table public.chat_members;