-- Create a table for Public Profiles
create table files (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,

  title text,
  private boolean,
  file_name text,

  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table files enable row level security;

create policy "Users can delete their own files."
  on files for delete
  using (auth.uid() = user_id);

create policy "Users can insert their own files."
  on files for insert
  with check ( auth.uid() = user_id );

create policy "Users can see public and their own files."
  on files for select
  using ( private = false OR auth.uid() = user_id);

-- Set up Storage!
insert into storage.buckets (id, name)
values ('public', 'public');

create policy "Public files are accessible."
  on storage.objects for select
  using ( bucket_id = 'public' );

insert into storage.buckets (id, name)
values ('private', 'private');

create policy "Private files are accessible for their creators."
  on storage.objects for select
  using ( bucket_id = 'private' AND auth.uid() = owner );

create policy "Users can create files."
  on storage.objects for insert
  with check ( auth.role() = 'authenticated' );

create policy "Delete files"
  on storage.objects for delete
  using ( auth.uid() = owner );